
using CQRS.Core.Exceptions;
using Daikon.Events.Gene;
using Microsoft.Extensions.Logging;

namespace Gene.Application.Query.EventHandlers
{
    public partial class GeneEventHandler
    {
        public async Task OnEvent(GeneVulnerabilityAddedEvent @event)
        {
            _logger.LogInformation("OnEvent: GeneVulnerabilityAddedEvent: {VulnerabilityId}", @event.VulnerabilityId);
            var vulnerability = new Domain.Entities.Vulnerability
            {
                Id = @event.VulnerabilityId,
                GeneId = @event.GeneId,
                VulnerabilityId = @event.VulnerabilityId,
                Rank = @event.Rank,
                ViUpperBound = @event.ViUpperBound,
                ViLowerBound = @event.ViLowerBound,
                VulnerabilityIndex = @event.VulnerabilityIndex,
                VulnerabilityCondition = @event.VulnerabilityCondition,
                TnSeqEss = @event.TnSeqEss,
                CrisprEss = @event.CrisprEss,
                HighConfidenceVulnerabilityCall = @event.HighConfidenceVulnerabilityCall,
                Reference = @event.Reference,
                URL = @event.URL,
                
                DateCreated = DateTime.UtcNow,
                IsModified = false,
                IsDraft = false
            };

            try
            {
                await _geneVulnerabilityRepository.AddVulnerability(vulnerability);
            }
            catch (RepositoryException ex)
            {
                throw new EventHandlerException(nameof(EventHandler), "GeneVulnerabilityCreatedEvent Error creating vulnerability", ex);
            }
        }

        public async Task OnEvent(GeneVulnerabilityUpdatedEvent @event)
        {
            _logger.LogInformation("OnEvent: GeneVulnerabilityUpdatedEvent: {VulnerabilityId}", @event.VulnerabilityId);

            var vulnerability = await _geneVulnerabilityRepository.Read(@event.VulnerabilityId);

            vulnerability.Rank = @event.Rank;
            vulnerability.ViUpperBound = @event.ViUpperBound;
            vulnerability.ViLowerBound = @event.ViLowerBound;
            vulnerability.VulnerabilityIndex = @event.VulnerabilityIndex;
            vulnerability.VulnerabilityCondition = @event.VulnerabilityCondition;
            vulnerability.TnSeqEss = @event.TnSeqEss;
            vulnerability.CrisprEss = @event.CrisprEss;
            vulnerability.HighConfidenceVulnerabilityCall = @event.HighConfidenceVulnerabilityCall;
            vulnerability.Reference = @event.Reference;
            vulnerability.URL = @event.URL;
            vulnerability.IsModified = true;

            try
            {
                await _geneVulnerabilityRepository.UpdateVulnerability(vulnerability);
            }
            catch (RepositoryException ex)
            {
                throw new EventHandlerException(nameof(EventHandler), "GeneVulnerabilityUpdatedEvent Error updating vulnerability with id @event.VulnerabilityId", ex);
            }
        }

        public async Task OnEvent(GeneVulnerabilityDeletedEvent @event)
        {
            _logger.LogInformation("OnEvent: GeneVulnerabilityDeletedEvent: {VulnerabilityId}", @event.VulnerabilityId);
            try
            {
                await _geneVulnerabilityRepository.DeleteVulnerability(@event.VulnerabilityId);
            }
            catch (RepositoryException ex)
            {
                throw new EventHandlerException(nameof(EventHandler), "GeneVulnerabilityDeletedEvent Error deleting vulnerability with id @event.VulnerabilityId", ex);
            }
        }
    }
}