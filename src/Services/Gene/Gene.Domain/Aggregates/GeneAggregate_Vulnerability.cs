
using Daikon.Events.Gene;
using Gene.Domain.Entities;

namespace Gene.Domain.Aggregates
{
    public partial class GeneAggregate
    {

        private readonly Dictionary<Guid, Vulnerability> _vulnerabilities = [];

        /* Add Vulnerability */
        public void AddVulnerability(Vulnerability vulnerability)
        {
            if (!_active)
            {
                throw new InvalidOperationException("This gene is deleted.");
            }

            if (string.IsNullOrWhiteSpace(vulnerability.Rank))
            {
                throw new InvalidOperationException($" The value of vulnerability rank cannot be null or whitespace");
            }


            RaiseEvent(new GeneVulnerabilityAddedEvent
            {
                Id = _id,
                GeneId = _id,
                VulnerabilityId = vulnerability.VulnerabilityId,
                Rank = vulnerability.Rank,
                ViLowerBound = vulnerability.ViLowerBound,
                ViUpperBound = vulnerability.ViUpperBound,
                VulnerabilityIndex = vulnerability.VulnerabilityIndex,
                VulnerabilityCondition = vulnerability.VulnerabilityCondition,
                TnSeqEss = vulnerability.TnSeqEss,
                CrisprEss = vulnerability.CrisprEss,
                HighConfidenceVulnerabilityCall = vulnerability.HighConfidenceVulnerabilityCall,
                Reference = vulnerability.Reference,
                URL = vulnerability.URL,
                DateCreated = DateTime.UtcNow
            });
        }

        public void Apply(GeneVulnerabilityAddedEvent @event)
        {
            _vulnerabilities.Add(@event.VulnerabilityId, new Vulnerability
            {
                VulnerabilityId = @event.VulnerabilityId,
                Rank = @event.Rank,
                ViLowerBound = @event.ViLowerBound,
                ViUpperBound = @event.ViUpperBound,
                VulnerabilityIndex = @event.VulnerabilityIndex,
                VulnerabilityCondition = @event.VulnerabilityCondition,
                TnSeqEss = @event.TnSeqEss,
                CrisprEss = @event.CrisprEss,
                HighConfidenceVulnerabilityCall = @event.HighConfidenceVulnerabilityCall,
                Reference = @event.Reference,
                URL = @event.URL,
                
            });
        }

        /* Update Vulnerability */
        public void UpdateVulnerability(Vulnerability vulnerability)
        {
            if (!_active)
            {
                throw new InvalidOperationException("This gene is deleted.");
            }

            if (!_vulnerabilities.ContainsKey(vulnerability.VulnerabilityId))
            {
                throw new InvalidOperationException("Vulnerability does not exist.");
            }
            if (string.IsNullOrWhiteSpace(vulnerability.Rank))
            {
                throw new InvalidOperationException($" The value of vulnerability rank cannot be null or whitespace");
            }

            RaiseEvent(new GeneVulnerabilityUpdatedEvent
            {
                Id = _id,
                GeneId = _id,
                VulnerabilityId = vulnerability.VulnerabilityId,
                Rank = vulnerability.Rank,
                ViLowerBound = vulnerability.ViLowerBound,
                ViUpperBound = vulnerability.ViUpperBound,
                VulnerabilityIndex = vulnerability.VulnerabilityIndex,
                VulnerabilityCondition = vulnerability.VulnerabilityCondition,
                TnSeqEss = vulnerability.TnSeqEss,
                CrisprEss = vulnerability.CrisprEss,
                HighConfidenceVulnerabilityCall = vulnerability.HighConfidenceVulnerabilityCall,
                Reference = vulnerability.Reference,
                URL = vulnerability.URL,
                DateUpdated = DateTime.UtcNow
            });
        }

        public void Apply(GeneVulnerabilityUpdatedEvent @event)
        {
            _id = @event.Id;
            _vulnerabilities[@event.VulnerabilityId] = new Vulnerability
            {
                VulnerabilityId = @event.VulnerabilityId,
                Rank = @event.Rank,
                ViLowerBound = @event.ViLowerBound,
                ViUpperBound = @event.ViUpperBound,
                VulnerabilityIndex = @event.VulnerabilityIndex,
                VulnerabilityCondition = @event.VulnerabilityCondition,
                TnSeqEss = @event.TnSeqEss,
                CrisprEss = @event.CrisprEss,
                HighConfidenceVulnerabilityCall = @event.HighConfidenceVulnerabilityCall,
                Reference = @event.Reference,
                URL = @event.URL,
            };
        }

        /* Delete Vulnerability */
        public void DeleteVulnerability(Vulnerability vulnerability)
        {
            if (!_active)
            {
                throw new InvalidOperationException("This gene is deleted.");
            }
            if (!_vulnerabilities.ContainsKey(vulnerability.VulnerabilityId))
            {
                throw new InvalidOperationException("Vulnerability does not exist.");
            }

            RaiseEvent(new GeneVulnerabilityDeletedEvent
            {
                Id = _id,
                GeneId = _id,
                VulnerabilityId = vulnerability.VulnerabilityId

            });
        }

        public void Apply(GeneVulnerabilityDeletedEvent @event)
        {
            _id = @event.Id;
            _vulnerabilities.Remove(@event.VulnerabilityId);
        }
    }
}